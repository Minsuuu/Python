public class SList {
	Node head = null;//괄호가없으면 변수
	public SList() {//괄호가있으면 메소드
		
	}
	public void insert(int data) {//맨앞에넣는다
		Node newNode = new Node(data, head);
		head = newNode;
		
	}
	
	public void delete() {//맨앞에삭제
		if (head == null) return;
		else {
			head = head.next;
		}
//		Node p = head; //맨뒤에삭제
//		while (p.next.next != null) {
//			p = p.next;
//		}
//		p.next = null;
	}
	
	public void printList() {
		Node p = head;
		
		while (p != null) {
			System.out.println(p.data);
			p=p.next;
		}
	}
	public class Node {
		int data=0;
		Node next = null;
		
		public Node(int data, Node link) {
			this.data = data;
			this.next = link;
		}
		
	}
}

public class DList {
	Node head = null;
	Node tail = null;
	
	public DList() {
		head = new Node(0, null, null);
		tail = new Node(0, head, null);
		head.next = tail;
	}
	
	public void printList() {
		Node p = head.next;
		
		while (p != tail) {
			System.out.println(p.data);
			p=p.next;
		}
	}
	
	public void insert(int data) {
		Node newNode = new Node(data, null, null);
		Node p = head.next;
		while (p != tail) {
			if (data <= p.data) {
				newNode.prev = p.prev;
				newNode.next = p;
				p.prev.next = newNode;
				p.prev = newNode;
				break;
			} else {
				p = p.next;
			}
		}
	}
	
	private class Node {
		int data = 0;
		Node prev = null;
		Node next = null;
		

		public Node(int data, Node prevLink, Node nextLink) {
			this.data = data;
			this.prev = prevLink;
			this.next = nextLink;
		}
	}
}

public class LinkedListDriver {

	public static void main(String[] args) {
		DList x = new DList();
		
		x.insert(5);
		x.insert(3);
		x.insert(1);
		x.insert(8);
		x.insert(2);
		
		
		x.printList();
	}

}